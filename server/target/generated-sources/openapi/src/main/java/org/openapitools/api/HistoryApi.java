/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AddressHistoryDTO;
import org.openapitools.model.ErrorResponse;
import org.openapitools.model.NameHistoryDTO;
import org.openapitools.model.StatusHistoryDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-13T18:26:15.804555400+05:30[Asia/Calcutta]", comments = "Generator version: 7.10.0")
@Validated
@Tag(name = "History", description = "the History API")
public interface HistoryApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /history/address/{voterId} : Get Address History by Voter Id
     *
     * @param voterId Unique ID of the Voter (required)
     * @return Address History retrieved successfully (status code 200)
     *         or Voter not found (status code 404)
     */
    @Operation(
        operationId = "addressHistory",
        summary = "Get Address History by Voter Id",
        tags = { "History" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Address History retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AddressHistoryDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Voter not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/address/{voterId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AddressHistoryDTO> addressHistory(
        @Parameter(name = "voterId", description = "Unique ID of the Voter", required = true, in = ParameterIn.PATH) @PathVariable("voterId") String voterId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"zipCode\" : \"10001\", \"createdAt\" : \"2025-03-11T13:07:06.27Z\", \"city\" : \"New York\", \"historyId\" : 1, \"addressType\" : \"RESIDENTIAL\", \"county\" : \"New York County\", \"state\" : \"New York\", \"addressLine\" : \"123 Main Street\", \"aptNumber\" : \"Apt 4B\", \"updatedAt\" : \"2025-03-11T15:22:30.12Z\" }, { \"zipCode\" : \"10001\", \"createdAt\" : \"2025-03-11T13:07:06.27Z\", \"city\" : \"New York\", \"historyId\" : 1, \"addressType\" : \"RESIDENTIAL\", \"county\" : \"New York County\", \"state\" : \"New York\", \"addressLine\" : \"123 Main Street\", \"aptNumber\" : \"Apt 4B\", \"updatedAt\" : \"2025-03-11T15:22:30.12Z\" } ], \"message\" : \"Success\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Detailed error message\", \"timestamp\" : \"10:30:15\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /history/name/{voterId} : Get Name History by Voter Id
     *
     * @param voterId Unique ID of the Voter (required)
     * @return Name History retrieved successfully (status code 200)
     *         or Voter not found (status code 404)
     */
    @Operation(
        operationId = "nameHistory",
        summary = "Get Name History by Voter Id",
        tags = { "History" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Name History retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NameHistoryDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Voter not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/name/{voterId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<NameHistoryDTO> nameHistory(
        @Parameter(name = "voterId", description = "Unique ID of the Voter", required = true, in = ParameterIn.PATH) @PathVariable("voterId") String voterId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"firstName\" : \"John\", \"lastName\" : \"Doe\", \"createdAt\" : \"2025-03-11T13:07:06.27Z\", \"suffixName\" : \"Jr.\", \"middleName\" : \"A.\", \"id\" : 1, \"updatedAt\" : \"2025-03-11T13:07:06.27Z\" }, { \"firstName\" : \"John\", \"lastName\" : \"Doe\", \"createdAt\" : \"2025-03-11T13:07:06.27Z\", \"suffixName\" : \"Jr.\", \"middleName\" : \"A.\", \"id\" : 1, \"updatedAt\" : \"2025-03-11T13:07:06.27Z\" } ], \"message\" : \"Success\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Detailed error message\", \"timestamp\" : \"10:30:15\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /history/status/{voterId} : Get Status History by Voter Id
     *
     * @param voterId Unique ID of the Voter (required)
     * @return Status History retrieved successfully (status code 200)
     *         or Voter not found (status code 404)
     */
    @Operation(
        operationId = "statusHistory",
        summary = "Get Status History by Voter Id",
        tags = { "History" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Status History retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusHistoryDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Voter not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/history/status/{voterId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<StatusHistoryDTO> statusHistory(
        @Parameter(name = "voterId", description = "Unique ID of the Voter", required = true, in = ParameterIn.PATH) @PathVariable("voterId") String voterId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"createdAt\" : \"2025-03-11T13:07:06.27Z\", \"historyId\" : 1, \"status\" : \"Active\", \"updatedAt\" : \"2025-03-11T13:07:06.27Z\" }, { \"createdAt\" : \"2025-03-11T13:07:06.27Z\", \"historyId\" : 1, \"status\" : \"Active\", \"updatedAt\" : \"2025-03-11T13:07:06.27Z\" } ], \"message\" : \"Success\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Detailed error message\", \"timestamp\" : \"10:30:15\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
