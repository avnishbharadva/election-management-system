openapi: 3.0.0
info:
  title: Voter API
  version: 1.0.0
  description: API for voter registration and management

servers:
  - url: http://localhost:8081/api

paths:
  /voters:
    post:
      summary: Register a new voter
      description: Registers a new voter with the provided details.
      operationId: registerVoter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoterRegisterDTO'
      responses:
        "201":
          description: Voter successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoterDTO'
        "400":
          description: Invalid request data
        "409":
          description: Voter already exists
        "500":
          description: Internal server error
      tags:
        - Voter

  /voters/search:
    get:
      summary: Search voters with filters and pagination
      description: Search for voters based on various filter criteria such as first name, last name, date of birth, etc.
      operationId: searchVoters
      parameters:
        - name: firstName
          in: query
          description: The first name of the voter.
          required: false
          schema:
            type: string
        - name: lastName
          in: query
          description: The last name of the voter.
          required: false
          schema:
            type: string
        - name: dateOfBirth
          in: query
          description: The date of birth of the voter.
          required: false
          schema:
            type: string
            format: date
        - name: dmvNumber
          in: query
          description: The DMV number of the voter.
          required: false
          schema:
            type: string
        - name: ssnNumber
          in: query
          description: The SSN number of the voter.
          required: false
          schema:
            type: string
        - name: city
          in: query
          description: The city where the voter resides.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: The page number to retrieve.
          required: true
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          description: The number of voters per page.
          required: true
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          description: Sorting order of the results. Use multiple `sort` parameters to specify multiple fields (e.g., `sort=firstName,asc&sort=lastName,desc`).
          required: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
          example:
            - "firstName,asc"
            - "lastName,desc"
      responses:
        "200":
          description: Successfully retrieved paginated voter list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedVoterDTO"
        "400":
          description: Invalid request parameters
        "500":
          description: Server error

components:
  schemas:
    PaginatedVoterDTO:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/VoterDTO"
        totalElements:
          type: long
          description: Total number of voters found
        totalPages:
          type: integer
          description: Total pages available
        size:
          type: integer
          description: Number of voters per page
        number:
          type: integer
          description: Current page number

    VoterRegisterDTO:
      type: object
      required:
        - firstName
        - lastName
        - dateOfBirth
        - gender
        - dmvNumber
        - ssnNumber
        - email
        - phoneNumber
        - residentialAddress
      properties:
        firstName:
          type: string
          minLength: 2
          maxLength: 50
          example: "John"
        middleName:
          type: string
          maxLength: 20
          example: "A."
        lastName:
          type: string
          minLength: 2
          maxLength: 50
          example: "Doe"
        suffixName:
          type: string
          maxLength: 10
          example: "Jr."
        dateOfBirth:
          type: string
          format: date
          example: "1990-05-15"
        gender:
          type: string
          enum: [MALE, FEMALE]
          example: "MALE"
        dmvNumber:
          type: string
          pattern: "\\d{9}"
          example: "123456789"
        ssnNumber:
          type: string
          pattern: "\\d{9}"
          example: "987654321"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        phoneNumber:
          type: string
          pattern: "\\d{11}"
          example: "12345678901"
        hasVotedBefore:
          type: boolean
          example: false
        firstVotedYear:
          type: integer
          minimum: 1900
          maximum: 2025
          example: 2010
        partyId:
          type: integer
          format: int64
          example: 1
        residentialAddress:
          $ref: '#/components/schemas/AddressDTO'
        mailingAddress:
          $ref: '#/components/schemas/AddressDTO'
        image:
          type: string
          example: "base64-encoded-image-string"
        signature:
          type: string
          example: "base64-encoded-signature-string"
        statusId:
          type: integer
          format: int64
          example: 1

    VoterDTO:
      type: object
      required:
        - voterId
        - firstName
        - lastName
        - dateOfBirth
        - gender
        - dmvNumber
        - ssnNumber
        - email
        - phoneNumber
        - residentialAddress
      properties:
        voterId:
          type: string
          example: "000123456"
        firstName:
          type: string
          example: "John"
        middleName:
          type: string
          example: "A."
        lastName:
          type: string
          example: "Doe"
        suffixName:
          type: string
          example: "Jr."
        dateOfBirth:
          type: string
          format: date
          example: "1990-05-15"
        gender:
          type: string
          enum: [MALE, FEMALE]
          example: "MALE"
        dmvNumber:
          type: string
          example: "123456789"
        ssnNumber:
          type: string
          example: "987654321"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        phoneNumber:
          type: string
          example: "12345678901"
        hasVotedBefore:
          type: boolean
          example: false
        firstVotedYear:
          type: integer
          example: 2010
        partyId:
          type: integer
          format: int64
          example: 1
        residentialAddress:
          $ref: '#/components/schemas/AddressDTO'
        mailingAddress:
          $ref: '#/components/schemas/AddressDTO'
        image:
          type: string
          example: "base64-encoded-image-string"
        signature:
          type: string
          example: "base64-encoded-signature-string"
        statusId:
          type: integer
          format: int64
          example: 1

    AddressDTO:
      type: object
      required:
        - addressLine
        - city
        - county
        - zipCode
        - addressType
      properties:
        addressLine:
          type: string
          example: "123 Main St"
        aptNumber:
          type: string
          example: "Apt 4B"
        city:
          type: string
          example: "Springfield"
        county:
          type: string
          example: "Clark"
        state:
          type: string
          example: "New York"
        zipCode:
          type: string
          pattern: "\\d{5}"
          example: "62704"
        addressType:
          type: string
          enum: [RESIDENTIAL, MAILING]
          example: "RESIDENTIAL"
        voterId:
          type: string
          example: "000123456"


