openapi: 3.0.3
info:
  title: EMS Candidate APIs
  description: APIs for Managing Candidates
  version: 1.0.1
servers:
  - url: https://localhost:8082/api

paths:
  /candidates:
    get:
      summary: Get all candidates with pagination and sorting
      operationId: getAllCandidates
      tags:
        - Candidate
      parameters:
        - name: page
          in: query
          required: false
          description: Page number (0-based index)
          schema:
            type: integer
            default: 0
        - name: perPage
          in: query
          required: false
          description: Number of candidates per page
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          required: false
          description: Field to sort by
          schema:
            type: string
            default: candidateId
        - name: sortDir
          in: query
          required: false
          description: Sorting direction (ASC/DESC)
          schema:
            type: string
            enum: [ ASC, DESC ]
            default: ASC
      responses:
        "200":
          description: List of all candidates retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CandidatePageResponse"
    post:
      summary: Create a new Candidate
      operationId: createCandidate
      tags:
        - Candidate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CandidateDTO"
      responses:
        "201":
          description: Candidate created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CandidateApiResponse"
        "400":
          description: Invalid input data
  /candidates/search:
    get:
      summary: Search candidates based on criteria
      operationId: searchCandidates
      tags:
        - Candidate
      parameters:
        - name: page
          in: query
          required: false
          description: Page number (0-based index)
          schema:
            type: integer
            default: 0
        - name: perPage
          in: query
          required: false
          description: Number of candidates per page
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          required: false
          description: Field to sort by
          schema:
            type: string
            default: candidateId
        - name: sortOrder
          in: query
          required: false
          description: Sorting order (ASC/DESC)
          schema:
            type: string
            enum: [ ASC, DESC ]
            default: ASC
      responses:
        "200":
          description: List of candidates matching the search criteria
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CandidatePageResponse"
        "404":
          description: No candidates found matching the criteria
  /candidates/by-ssn/{candidateSSN}:
    get:
      summary: Get Candidate By SSN
      operationId: getCandidateBySSN
      tags:
        - Candidate
      parameters:
        - name: candidateSSN
          in: path
          required: true
          description: Unique SSN of candidate
          schema:
            type: string
      responses:
        "200":
          description: Candidate retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CandidateApiResponse"
        "404":
          description: Candidate not found with SSN

  /candidates/{candidateId}:
    get:
      summary: Get Candidate By ID
      operationId: getCandidateById
      tags:
        - Candidate
      parameters:
        - name: candidateId
          in: path
          required: true
          description: Unique ID of the candidate
          schema:
            type: long
      responses:
        "200":
          description: Candidate retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CandidateApiResponse"
        "404":
          description: Candidate not found

    delete:
      summary: Delete Candidate By ID
      operationId: deleteCandidateById
      tags:
        - Candidate
      parameters:
        - name: candidateId
          in: path
          required: true
          description: Unique ID of the candidate
          schema:
            type: long
      responses:
        "200":
          description: Candidate deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CandidateApiResponse"
        "404":
          description: Candidate not found

    put:
      summary: Update Candidate By ID
      operationId: updateCandidateById
      tags:
        - Candidate
      parameters:
        - name: candidateId
          in: path
          required: true
          description: Unique ID of the candidate
          schema:
            type: long
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CandidateDTO"
      responses:
        "200":
          description: Candidate updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CandidateApiResponse"
        "404":
          description: Candidate not found
components:
  schemas:
    CandidateName:
      type: object
      properties:
        firstName:
          type: string
          example: "John"
        middleName:
          type: string
          nullable: true
          example: "A."
        lastName:
          type: string
          example: "Doe"

    Gender:
      type: string
      enum: [ MALE, FEMALE ]
      example: MALE

    MaritialStatus:
      type: string
      enum: [ SINGLE, MARRIED, DIVORCED, WIDOWED ]
      example: SINGLE

    BankDetailsDTO:
      type: object
      properties:
        bankDetailsId:
          type: long
          example: 101
        bankName:
          type: string
          maxLength: 255
          example: "ABC Bank"
        bankAddress:
          type: string
          maxLength: 500
          example: "123 Bank Street, New York, NY"
      required:
        - bankName
        - bankAddress

    CandidateAddress:
      type: object
      properties:
        street:
          type: string
          maxLength: 255
          example: "456 Elm Street"
        city:
          type: string
          maxLength: 100
          example: "Los Angeles"
        zipcode:
          type: string
          pattern: "^\\d{5}$"
          example: "90001"
      required:
        - street
        - city
        - zipcode

    CandidateByPartyDTO:
      type: object
      properties:
        candidateName:
          $ref: '#/components/schemas/CandidateName'
        residentialAddress:
          $ref: '#/components/schemas/CandidateAddress'
        mailingAddress:
          $ref: '#/components/schemas/CandidateAddress'
        gender:
          $ref: '#/components/schemas/Gender'

    CandidateDataDTO:
      type: object
      properties:
        candidate:
          $ref: '#/components/schemas/CandidateDTO'
        candidateImage:
          type: string
          example: "base64_encoded_image_data"
        candidateSignature:
          type: string
          example: "base64_encoded_signature_data"

    CandidateDetailsDTO:
      type: object
      properties:
        candidateId:
          type: integer
          format: int64
          example: 1001
        candidateName:
          $ref: '#/components/schemas/CandidateName'
        candidateSSN:
          type: string
          pattern: "^\\d{9}$"
          example: "123456789"
        gender:
          $ref: '#/components/schemas/Gender'
        spouseName:
          type: string
          pattern: "^[A-Za-z ]*$"
          example: "Jane Doe"
        partyName:
          type: string
          pattern: "^[A-Za-z ]+$"
          example: "Democratic Party"
        stateName:
          type: string
          pattern: "^[A-Za-z ]+$"
          example: "California"
        candidateEmail:
          type: string
          format: email
          example: "john.doe@example.com"
        electionName:
          type: string
          example: "Presidential Election 2024"
      required:
        - candidateName
        - candidateSSN
        - gender
        - partyName
        - stateName
        - candidateEmail
        - electionName

    CandidateDTO:
      type: object
      properties:
        candidateId:
          type: integer
          format: int64
          example: 1001
        candidateName:
          $ref: '#/components/schemas/CandidateName'
        candidateSSN:
          type: string
          pattern: "^\\d{9}$"
          example: "123456789"
        dateOfBirth:
          type: string
          format: date
          example: "1985-07-21"
        gender:
          $ref: '#/components/schemas/Gender'
        maritialStatus:
          $ref: '#/components/schemas/MaritialStatus'
        noOfChildren:
          type: integer
          minimum: 0
          example: 2
        spouseName:
          type: string
          pattern: "^[A-Za-z ]*$"
          example: "Jane Doe"
        partyId:
          type: integer
          format: int64
          example: 10
        residentialAddress:
          $ref: '#/components/schemas/CandidateAddress'
        mailingAddress:
          $ref: '#/components/schemas/CandidateAddress'
        stateName:
          type: string
          pattern: "^[A-Za-z ]+$"
          example: "California"
        candidateEmail:
          type: string
          format: email
          example: "john.doe@example.com"
        electionId:
          type: integer
          format: int64
          example: 2024
        electionName:
          type: string
          example: "Presidential Election 2024"
        partyName:
          type: string
          example: "Democratic Party"
        bankDetails:
          $ref: '#/components/schemas/BankDetailsDTO'
        candidateImage:
          type: string
          example: "base64_encoded_image_data"
        candidateSignature:
          type: string
          example: "base64_encoded_signature_data"
      required:
        - candidateName
        - candidateSSN
        - dateOfBirth
        - gender
        - maritialStatus
        - partyId
        - residentialAddress
        - mailingAddress
        - stateName
        - candidateEmail
        - electionId
        - bankDetails

    CandidateApiResponse:
      type: object
      properties:
        message:
          type: string
          example: "Candidate data retrieved successfully"
        timestamp:
          type: string
          format: date-time
          example: "2024-06-01T12:34:56Z"
        success:
          type: boolean
          example: true
        data:
          type: object
          example: {}

    CandidatePageResponse:
      type: object
      properties:
        candidates:
          type: array
          items:
            $ref: '#/components/schemas/CandidateDetailsDTO'
          example: []
        currentPage:
          type: integer
          example: 1
        totalPages:
          type: integer
          example: 10
        totalRecords:
          type: integer
          format: int64
          example: 100
        perPage:
          type: integer
          example: 10
      required:
        - candidates
        - currentPage
        - totalPages
        - totalRecords
        - perPage
